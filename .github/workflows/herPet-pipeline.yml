name: PetClinic CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' 
        #----Sonarcloud---#
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=DevOps-Spring-PetClinic_devops-sdlc-pipeline

      #-----Slack-----#
      - name: Post to devOps-Project channel
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
           payload: |
            {
              "text": "GitHub Action Build Result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action Build Result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Test with JUnit
        run: mvn -B test
      #---Slack----#
      - name: Post to devOps-Project
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
           payload: |
            {
              "text": "GitHub Action Test Result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action Test Result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          
  containerisation:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/devops-sdlc-pipeline:main .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/devops-sdlc-pipeline:main
        
      #----slack----#
      - name: Post to devOps-Project
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
           payload: |
            {
              "text": "GitHub Action Containerisation Result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action Containerisation Result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      

  deploy:
    name: deploy and monitor
    runs-on: ubuntu-latest
    needs: containerisation
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.CREDENTIALS_JSON }}'
          
      - uses: "google-github-actions/setup-gcloud@v2"
        with:
          install_components: "gke-gcloud-auth-plugin"

      - name: Get GKE credentials
        run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region us-central1 --project ${{ secrets.PROJECT_ID }}
          
      - name: Deploy to GKE
        run: |
          kubectl apply -f .devcontainer/deployment.yml
          kubectl apply -f .devcontainer/service.yml
          
      - name: Setup Monitoring Metrics
        run: |      
            # Check the status of the deployment
            kubectl get deployments
            # Monitor resource usage
            kubectl top nodes
            kubectl top pods
        
      - name: Post to devOps-Project
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
           payload: |
            {
              "text": "GitHub Action Deployment and Monitoring Results: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action Deployment and Monitoring Results: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

