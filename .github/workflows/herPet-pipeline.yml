name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=DevOps-Spring-PetClinic_devops-sdlc-pipeline

      - name: Post to devOps-Project
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
              # Slack channel id, channel name, or user id to post message.
              # See also: https://api.slack.com/methods/chat.postMessage#channels
              # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: 'C070J5J1VNU'
              # For posting a simple plain text message
          slack-message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Test with Maven
        run: mvn -B test



  containerization:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: user/app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: containerization
    steps:
      - name: Deploy to Kubernetes
        run: kubectl apply -f deployment.yaml
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

  monitor:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Setup Monitoring
        run: echo "Setup monitoring tools or scripts"
